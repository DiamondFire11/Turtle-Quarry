---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Will.
--- DateTime: 12/9/2020 11:38 AM
---

-- Calculate the heading of the turtle
function getHeading()
    local pi = vector.new(gps.locate(5))
    local pf

    print("Calculating turtle bearing.")

    for i = 1, 5 do
        if not turtle.forward() then
            turtle.dig()
            turtle.forward()
        end
    end

    pf = vector.new(gps.locate(5))

    if pf:length() > 0 or pi:length() > 0 then
        local Dx = (pf.x - pi.x) -- Give us our change in x
        local Dz = (pf.z - pi.z) -- Give us our change in z

        if Dx < 0 then
            print("Bearing is 270 degrees")
            return 270
        end

        if Dx > 0 then
            print("Bearing is 90 degrees")
            return 90
        end

        if Dz < 0 then
            print("Bearing is 0 degrees")
            return 0
        end

        if Dz > 0 then
            print("Bearing is 180 degrees")
            return 180
        end
    else
        print("Could not obtain bearing.  Check GPS")
    end
end

-- Refactor later I want a more efficient method of changing the heading
function changeHeading(heading, bearing)
    while heading ~= bearing do
        turtle.turnRight()
        heading = heading + 90
        if heading == 360 then
            heading = 0
        end
    end
    return heading
end

function goToY(destination, currentPos)
    -- Proceed to y destination
    while currentPos.y ~= destination.y do
        if currentPos.y < destination.y then
            turtle.digUp()
            turtle.up()
        else
            turtle.digDown()
            turtle.down()
        end
        currentPos = vector.new(gps.locate(5))
    end
    return currentPos
end

function goToZ(destination, currentPos, heading)
    -- Check heading and if necessary correct heading.  Then proceed to z destination
    if currentPos.z < destination.z then
        heading = changeHeading(heading, 180)
    else
        heading = changeHeading(heading, 0)
    end
    while currentPos.z ~= destination.z do
        turtle.dig()
        turtle.forward()
        currentPos = vector.new(gps.locate(5))
    end
    return currentPos, heading
end

function goToX(destination, currentPos, heading)
    -- Check heading and if necessary correct heading.  Then proceed to x destination
    if currentPos.x < destination.x then
        heading = changeHeading(heading, 90)
    else
        heading = changeHeading(heading, 270)
    end
    while currentPos.x ~= destination.x do
        turtle.dig()
        turtle.forward()
        currentPos = vector.new(gps.locate(5))
    end
    return currentPos, heading
end

-- Travel to the desired location
function travelToDestination(destination, heading)
    local currentPos = vector.new(gps.locate(5))

    if not currentPos then
        print("Could not obtain current position")
    else
        goToY(destination, currentPos)
        currentPos, heading = goToX(destination, currentPos, heading)
        currentPos, heading = goToZ(destination, currentPos, heading)
    end
    return heading
end

function returnHome(destination, heading)
    local currentPos = vector.new(gps.locate(5))

    if not currentPos then
        print("Could not obtain current position")
    else
        goToY(destination, currentPos)
        currentPos, heading = goToZ(destination, currentPos, heading)
        currentPos, heading = goToX(destination, currentPos, heading)
    end
    return heading
end